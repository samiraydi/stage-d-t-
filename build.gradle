buildscript {
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    } 
  }

  dependencies {
    classpath "com.github.node-gradle:gradle-node-plugin:2.2.3"
  }
}


//------------------------------------------------------------------
//    Plugins - Application
//------------------------------------------------------------------
apply plugin: 'com.github.node-gradle.node'

//------------------------------------------------------------------
//    Plugin configuration
//------------------------------------------------------------------

node {
	// Version of node to use.
	version = '12.13.0'
	
	// Version of npm to use.
	npmVersion = '6.12.0'
	
	// Base URL for fetching node distributions (change if you have a mirror).
	// Or set to null if you want to add the repository on your own.
	distBaseUrl = 'https://nodejs.org/dist'
	
	// If true, it will download node using above parameters.
	// If false, it will try to use globally installed node.
	download = true
	
	// Set the work directory for unpacking node
	workDir = file("${project.buildDir}/nodejs")
	
	// Set the work directory for NPM
	npmWorkDir = file("${project.buildDir}/npm")
	
	// Set the work directory where node_modules should be located
	nodeModulesDir = file("${project.projectDir}")
	
	/*
    version = '13.1.7'
    npmVersion = '5.4.2'
    download = true
    workDir = file("${rootDir}/frontend/node")
    nodeModulesDir = file("${rootDir}/frontend")
    */
}

//------------------------------------------------------------------
//    Tasks - NPM
//------------------------------------------------------------------

task clean(type: Delete) {
    group 'build client'
    delete "${rootDir}/frontend/dist", "${rootDir}/backend/src/main/resources/static"
}

task cleanNpm(type: Delete) {
    group 'build frontend'
    dependsOn 'clean'
    delete "${rootDir}/frontend/node", "${rootDir}/frontend/node_modules"
}

task npmUpdate {
    group 'build frontend'
    dependsOn 'npm_update'
}

//------------------------------------------------------------------
//    Tasks - Standalone client
//------------------------------------------------------------------

task buildStandaloneFrontend(type: NpmTask, dependsOn: npmInstall) {
    group 'build frontend'
    description = 'Compile frontend side folder for development'
    args = ['run', 'buildStandalone']
}

task serveStandaloneFrontendWatch(type: NpmTask, dependsOn: npmInstall) {
    group 'build frontend'
    description = "Builds, serves and watches the frontend side assets for rebuilding"
    args = ['run', 'serveStandaloneWatch']
}

task serveStandaloneFrontend(type: NpmTask, dependsOn: npmInstall) {
    group 'build frontend'
    description = "Compile frontend side folder for production"
    args = ['start']
}

task bootStandaloneFrontend(type: GradleBuild) {
    group 'application'
    setTasks(['clean', 'buildStandaloneFrontend', 'serveStandaloneFrontend'])
//    finalizedBy 'npm_shutdown'
}

task bootStandaloneFrontendWatch(type: GradleBuild) {
    group 'application'
    setTasks(['clean', 'serveStandaloneFrontendWatch'])
//    finalizedBy 'npm_shutdown'
}

//------------------------------------------------------------------
//    Tasks - Integrated frontend
//------------------------------------------------------------------

task buildFrontendToSpring(type: NpmTask, dependsOn: npmInstall) {
    group 'build frontend'
    description = 'Compile frontend side folder for development'
    args = ['run', 'buildToSpring']
}